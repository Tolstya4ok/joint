#include <joint/public/Error.h>


extern "C"
{

	const char* JointCore_ErrorToString(JointCore_Error err)
	{
#define DETAIL_JOINT_ERR_TO_STRING(Val_) case Val_: return #Val_
		switch (err)
		{
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_NONE);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_CAST_FAILED);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_EXCEPTION);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_GENERIC);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_NO_SUCH_BINDING);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_NO_SUCH_MODULE);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_NOT_IMPLEMENTED);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_INVALID_PARAMETER);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_OUT_OF_MEMORY);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_IMPLEMENTATION_ERROR);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_INVALID_INTERFACE_CHECKSUM);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_INDEX_OUT_OF_RANGE);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_IO_ERROR);
		DETAIL_JOINT_ERR_TO_STRING(JOINT_CORE_ERROR_INVALID_MANIFEST);
		}
#undef DETAIL_JOINT_ERR_TO_STRING

		return "Unknown error";
	}

}
